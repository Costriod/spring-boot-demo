server.port=9090
spring.cloud.stream.rocketmq.binder.name-server=127.0.0.1:9876

spring.cloud.stream.bindings.output.destination=test-topic
spring.cloud.stream.bindings.output.content-type=application/json

# input1这个binding没有设置consumer.tags，所以input1会接收到所有来自test-topic的消息（无论test-topic消息的tag是什么）
spring.cloud.stream.bindings.input1.destination=test-topic
spring.cloud.stream.bindings.input1.content-type=text/plain
spring.cloud.stream.bindings.input1.group=test-group1
spring.cloud.stream.rocketmq.bindings.input1.consumer.orderly=true

# input2这个binding设置了consumer.tags，所以input2只会接收tags为tagStr的消息
spring.cloud.stream.bindings.input2.destination=test-topic
spring.cloud.stream.bindings.input2.content-type=text/plain
spring.cloud.stream.bindings.input2.group=test-group2
spring.cloud.stream.bindings.input2.consumer.concurrency=20
spring.cloud.stream.rocketmq.bindings.input2.consumer.orderly=false
spring.cloud.stream.rocketmq.bindings.input2.consumer.tags=tagStr

#目前spring-cloud-starter-stream-rocketmq还不支持 MessageQueueSelector，也就意味着producer无法发送消息到指定的queue，
#如果producer发送多个业务上有顺序要求的消息时，这些消息会分摊到topic的所有queue里面，而多个queue的消息不能保证顺序
#如果需要发送顺序消息，还是要使用原生的DefaultMQProducer结合MessageQueueSelector发送顺序消息

rocketmq.namesrvAddr=127.0.0.1:9876

rocketmq.producer.groupName=test-group3

rocketmq.cunsumer.groupName=test-group4
rocketmq.cunsumer.topic=test-topic
rocketmq.cunsumer.tag=tagStr